{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO0MkCDWAD371uNWxGtkwWc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/K-Pavan0987654321/Python-development/blob/main/PCB_COMPONENT_PLACEMENT%20Project%20using%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FOs0qvjbhLu8",
        "outputId": "6797ade5-a862-45b3-b758-15f42c8ed748"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- DEMO 1: TESTING A VALID PLACEMENT ---\n",
            "--- Running Detailed Hard Constraint Validation ---\n",
            "Boundary Constraint   : ✅ PASSED \n",
            "No Overlapping        : ✅ PASSED \n",
            "Edge Placement        : ✅ PASSED \n",
            "Parallel Placement    : ✅ PASSED \n",
            "Proximity Constraint  : ✅ PASSED Actual distance: 8.54 (Limit: 10.0)\n",
            "Global Balance        : ✅ PASSED CoM dist from center: 1.70 (Limit: 2.0)\n",
            "Keep-Out Zone         : ✅ PASSED Path is clear\n",
            "\n",
            "--- Performance Report for Validation ---\n",
            "Validation function finished in: 0.000510 seconds\n",
            "✅ PERFORMANCE PASSED (Validation is fast enough)\n",
            "---------------------------------------\n",
            "\n",
            "✅ This placement is fully valid.\n",
            "\n",
            "--- Calculating Placement Score (Lower is Better) ---\n",
            "Compactness Score (Bounding Box Area): 1800.00\n",
            "Centrality Score (uC dist from center): 0.71\n",
            "-------------------------------------------\n",
            "Total Combined Score: 1807.07\n",
            "-------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "\n"
          ]
        }
      ],
      "source": [
        "\"\"\"\n",
        "A utility module for the PCB Component Placement coding assignment.\n",
        "\n",
        "This module provides functions to:\n",
        "1.  Validate a given component placement against all hard constraints.\n",
        "2.  Calculate a score for a valid placement based on soft constraints.\n",
        "3.  Generate a plot to visualize a placement and its constraints.\n",
        "\n",
        "A candidate should import these functions into their own solver script to check\n",
        "the correctness and quality of their generated solution.\n",
        "\n",
        "Expected Placement Dictionary Format:\n",
        "{\n",
        "    'COMPONENT_NAME': {'x': float, 'y': float, 'w': float, 'h': float},\n",
        "    ...\n",
        "}\n",
        "\"\"\"\n",
        "import time\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.patches as patches\n",
        "\n",
        "# --- Assignment Constants (Part of the problem definition) ---\n",
        "BOARD_DIMS = (50, 50)\n",
        "PROXIMITY_RADIUS = 10.0\n",
        "CENTER_OF_MASS_RADIUS = 2.0\n",
        "KEEPOUT_ZONE_DIMS = (10, 20)  # 10 wide, 15 inward\n",
        "VALIDATION_TIME_LIMIT = 2 # Validation should be extremely fast\n",
        "\n",
        "# --- Geometric Helper Functions (Internal use) ---\n",
        "def _get_center(comp):\n",
        "    \"\"\"Calculates the center coordinates of a component.\"\"\"\n",
        "    return (comp['x'] + comp['w'] / 2, comp['y'] + comp['h'] / 2)\n",
        "\n",
        "def _distance(p1, p2):\n",
        "    \"\"\"Calculates the Euclidean distance between two points.\"\"\"\n",
        "    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)\n",
        "\n",
        "# --- Public Utility Functions for Candidates ---\n",
        "\n",
        "def validate_placement(placement):\n",
        "    \"\"\"\n",
        "    Validates a component placement against all hard constraints.\n",
        "\n",
        "    This function checks each rule from the assignment specification and prints\n",
        "    a detailed report of which rules passed or failed.\n",
        "\n",
        "    Args:\n",
        "        placement (dict): A dictionary representing the component placement.\n",
        "            Keys should be the component names (e.g., 'USB_CONNECTOR').\n",
        "            Values should be dictionaries with 'x', 'y', 'w', 'h' keys.\n",
        "\n",
        "    Returns:\n",
        "        bool: True if the placement satisfies all hard constraints, False otherwise.\n",
        "    \"\"\"\n",
        "    print(\"--- Running Detailed Hard Constraint Validation ---\")\n",
        "    results = {}\n",
        "\n",
        "    # Check for presence of all required components\n",
        "    required_keys = ['USB_CONNECTOR', 'MICROCONTROLLER', 'CRYSTAL',\n",
        "                     'MIKROBUS_CONNECTOR_1', 'MIKROBUS_CONNECTOR_2']\n",
        "    if not all(key in placement for key in required_keys):\n",
        "        print(\"❌ FAILED: The placement dictionary is missing one or more required components.\")\n",
        "        return False\n",
        "\n",
        "    # Rule 5: Boundary Constraint\n",
        "    all_in_bounds = True\n",
        "    for name, comp in placement.items():\n",
        "        if not (comp['x'] >= 0 and comp['y'] >= 0 and\n",
        "                comp['x'] + comp['w'] <= BOARD_DIMS[0] and\n",
        "                comp['y'] + comp['h'] <= BOARD_DIMS[1]):\n",
        "            all_in_bounds = False\n",
        "            break\n",
        "    results[\"Boundary Constraint\"] = (all_in_bounds, \"\")\n",
        "\n",
        "    # Rule 4: No Overlapping\n",
        "    items = list(placement.items())\n",
        "    overlap_found = False\n",
        "    for i in range(len(items)):\n",
        "        for j in range(i + 1, len(items)):\n",
        "            c1, c2 = items[i][1], items[j][1]\n",
        "            if not (c1['x'] + c1['w'] <= c2['x'] or c1['x'] >= c2['x'] + c2['w'] or\n",
        "                    c1['y'] + c1['h'] <= c2['y'] or c1['y'] >= c2['y'] + c2['h']):\n",
        "                overlap_found = True\n",
        "                break\n",
        "        if overlap_found: break\n",
        "    results[\"No Overlapping\"] = (not overlap_found, \"\")\n",
        "\n",
        "    # Rule 1: Edge Placement\n",
        "    edge_names = ['USB_CONNECTOR', 'MIKROBUS_CONNECTOR_1', 'MIKROBUS_CONNECTOR_2']\n",
        "    all_on_edge = True\n",
        "    for name in edge_names:\n",
        "        comp = placement[name]\n",
        "        if not (comp['x'] == 0 or comp['y'] == 0 or\n",
        "                comp['x'] + comp['w'] == BOARD_DIMS[0] or comp['y'] + comp['h'] == BOARD_DIMS[1]):\n",
        "            all_on_edge = False\n",
        "            break\n",
        "    results[\"Edge Placement\"] = (all_on_edge, \"\")\n",
        "\n",
        "    # Rule 2: Parallel Placement\n",
        "    mb1, mb2 = placement['MIKROBUS_CONNECTOR_1'], placement['MIKROBUS_CONNECTOR_2']\n",
        "    is_parallel = False\n",
        "    if mb1['w'] == mb2['w']:  # Same orientation\n",
        "        on_opp_v = (mb1['x'] == 0 and mb2['x'] + mb2['w'] == BOARD_DIMS[0]) or \\\n",
        "                   (mb1['x'] + mb1['w'] == BOARD_DIMS[0] and mb2['x'] == 0)\n",
        "        on_opp_h = (mb1['y'] == 0 and mb2['y'] + mb2['h'] == BOARD_DIMS[1]) or \\\n",
        "                   (mb1['y'] + mb1['h'] == BOARD_DIMS[1] and mb2['y'] == 0)\n",
        "        if on_opp_v or on_opp_h:\n",
        "            is_parallel = True\n",
        "    results[\"Parallel Placement\"] = (is_parallel, \"\")\n",
        "\n",
        "    # Rule 3: Proximity Constraint\n",
        "    dist = _distance(_get_center(placement['CRYSTAL']), _get_center(placement['MICROCONTROLLER']))\n",
        "    results[\"Proximity Constraint\"] = (dist <= PROXIMITY_RADIUS, f\"Actual distance: {dist:.2f} (Limit: {PROXIMITY_RADIUS})\")\n",
        "\n",
        "    # Rule 6: Global Balance Constraint\n",
        "    board_center = (BOARD_DIMS[0] / 2, BOARD_DIMS[1] / 2)\n",
        "    com_x = sum(_get_center(c)[0] for c in placement.values()) / len(placement)\n",
        "    com_y = sum(_get_center(c)[1] for c in placement.values()) / len(placement)\n",
        "    com_dist = _distance((com_x, com_y), board_center)\n",
        "    results[\"Global Balance\"] = (com_dist <= CENTER_OF_MASS_RADIUS, f\"CoM dist from center: {com_dist:.2f} (Limit: {CENTER_OF_MASS_RADIUS})\")\n",
        "\n",
        "    # Rule 7: Crystal Keep-Out Zone\n",
        "    usb, crystal, micro = placement['USB_CONNECTOR'], placement['CRYSTAL'], placement['MICROCONTROLLER']\n",
        "    zone_w, zone_h_inward = KEEPOUT_ZONE_DIMS\n",
        "    usb_cx, usb_cy = _get_center(usb)\n",
        "    if usb['y'] == 0: zone = {'x': usb_cx - zone_w / 2, 'y': 0, 'w': zone_w, 'h': zone_h_inward}\n",
        "    elif usb['y'] + usb['h'] == BOARD_DIMS[1]: zone = {'x': usb_cx - zone_w / 2, 'y': BOARD_DIMS[1] - zone_h_inward, 'w': zone_w, 'h': zone_h_inward}\n",
        "    elif usb['x'] == 0: zone = {'x': 0, 'y': usb_cy - zone_w / 2, 'w': zone_h_inward, 'h': zone_w}\n",
        "    else: zone = {'x': BOARD_DIMS[0] - zone_h_inward, 'y': usb_cy - zone_w / 2, 'w': zone_h_inward, 'h': zone_w}\n",
        "    p1, p2 = _get_center(crystal), _get_center(micro)\n",
        "    def ccw(A,B,C): return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])\n",
        "    def intersect(A,B,C,D): return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)\n",
        "    tl, tr, bl, br = (zone['x'], zone['y']), (zone['x'] + zone['w'], zone['y']), (zone['x'], zone['y'] + zone['h']), (zone['x'] + zone['w'], zone['y'] + zone['h'])\n",
        "    intersects = (intersect(p1, p2, tl, tr) or intersect(p1, p2, tr, br) or intersect(p1, p2, br, bl) or intersect(p1, p2, bl, tl))\n",
        "    results[\"Keep-Out Zone\"] = (not intersects, \"Path is clear\" if not intersects else \"Path is obstructed\")\n",
        "\n",
        "    # Print Report\n",
        "    all_valid = True\n",
        "    for rule, (is_valid, msg) in results.items():\n",
        "        status = \"✅ PASSED\" if is_valid else \"❌ FAILED\"\n",
        "        print(f\"{rule:<22}: {status} {msg}\")\n",
        "        if not is_valid: all_valid = False\n",
        "\n",
        "    return all_valid\n",
        "\n",
        "def score_placement(placement):\n",
        "    \"\"\"\n",
        "    Calculates a score for a placement based on soft constraints.\n",
        "\n",
        "    A lower score is better. The score is a combination of the total\n",
        "    area of the layout's bounding box (compactness) and the distance\n",
        "    of the microcontroller from the board's center (centrality).\n",
        "\n",
        "    Note: This function should ideally be called only for placements that\n",
        "    have already passed validation.\n",
        "\n",
        "    Args:\n",
        "        placement (dict): A valid component placement dictionary.\n",
        "\n",
        "    Returns:\n",
        "        float: The calculated total score for the placement.\n",
        "    \"\"\"\n",
        "    print(\"\\n--- Calculating Placement Score (Lower is Better) ---\")\n",
        "    min_x = min(c['x'] for c in placement.values())\n",
        "    max_x = max(c['x'] + c['w'] for c in placement.values())\n",
        "    min_y = min(c['y'] for c in placement.values())\n",
        "    max_y = max(c['y'] + c['h'] for c in placement.values())\n",
        "    bounding_box_area = (max_x - min_x) * (max_y - min_y)\n",
        "\n",
        "    board_center = (BOARD_DIMS[0] / 2, BOARD_DIMS[1] / 2)\n",
        "    micro_center = _get_center(placement['MICROCONTROLLER'])\n",
        "    centrality_score = _distance(micro_center, board_center)\n",
        "\n",
        "    total_score = bounding_box_area + (centrality_score * 10) # Weight centrality\n",
        "    print(f\"Compactness Score (Bounding Box Area): {bounding_box_area:.2f}\")\n",
        "    print(f\"Centrality Score (uC dist from center): {centrality_score:.2f}\")\n",
        "    print(f\"-------------------------------------------\")\n",
        "    print(f\"Total Combined Score: {total_score:.2f}\")\n",
        "    print(f\"-------------------------------------------\")\n",
        "    return total_score\n",
        "\n",
        "def plot_placement(placement):\n",
        "    \"\"\"\n",
        "    Generates a matplotlib plot to visualize the component placement.\n",
        "\n",
        "    This function displays the board, grid, components, and visual indicators\n",
        "    for the proximity and keep-out zone constraints. Execution will be\n",
        "    blocked until the plot window is closed.\n",
        "\n",
        "    Args:\n",
        "        placement (dict): A component placement dictionary to visualize.\n",
        "    \"\"\"\n",
        "    fig, ax = plt.subplots(figsize=(8, 8))\n",
        "    ax.set_xlim(0, BOARD_DIMS[0])\n",
        "    ax.set_ylim(0, BOARD_DIMS[1])\n",
        "    ax.set_xticks(range(0, BOARD_DIMS[0] + 1, 5))\n",
        "    ax.set_yticks(range(0, BOARD_DIMS[1] + 1, 5))\n",
        "    ax.grid(True, linestyle='--', color='gray', alpha=0.5)\n",
        "    ax.set_aspect('equal', adjustable='box')\n",
        "    ax.invert_yaxis()\n",
        "    ax.set_title(\"PCB Component Placement Solution\")\n",
        "\n",
        "    colors = {'USB_CONNECTOR': '#e74c3c', 'MICROCONTROLLER': '#3498db', 'CRYSTAL': '#f39c12',\n",
        "              'MIKROBUS_CONNECTOR_1': '#9b59b6', 'MIKROBUS_CONNECTOR_2': '#8e44ad'}\n",
        "    labels = {'USB_CONNECTOR': 'USB', 'MICROCONTROLLER': 'μC', 'CRYSTAL': 'XTAL',\n",
        "              'MIKROBUS_CONNECTOR_1': 'MB1', 'MIKROBUS_CONNECTOR_2': 'MB2'}\n",
        "\n",
        "    for name, comp in placement.items():\n",
        "        rect = patches.Rectangle((comp['x'], comp['y']), comp['w'], comp['h'],\n",
        "                                 linewidth=1, edgecolor='black', facecolor=colors[name])\n",
        "        ax.add_patch(rect)\n",
        "        ax.text(comp['x'] + comp['w'] / 2, comp['y'] + comp['h'] / 2, labels[name],\n",
        "                color='white', ha='center', va='center', fontweight='bold')\n",
        "\n",
        "    uc_center = _get_center(placement['MICROCONTROLLER'])\n",
        "    circle = patches.Circle(uc_center, PROXIMITY_RADIUS, fill=True, color='#f39c12', alpha=0.1,\n",
        "                            linestyle='--', lw=2)\n",
        "    ax.add_patch(circle)\n",
        "\n",
        "    usb = placement['USB_CONNECTOR']\n",
        "    zone_w, zone_h_inward = KEEPOUT_ZONE_DIMS\n",
        "    usb_cx, usb_cy = _get_center(usb)\n",
        "    if usb['y'] == 0: zone_props = {'xy': (usb_cx-zone_w/2, 0), 'w': zone_w, 'h': zone_h_inward}\n",
        "    elif usb['y']+usb['h']==BOARD_DIMS[1]: zone_props = {'xy': (usb_cx-zone_w/2, BOARD_DIMS[1]-zone_h_inward), 'w': zone_w, 'h': zone_h_inward}\n",
        "    elif usb['x'] == 0: zone_props = {'xy': (0, usb_cy-zone_w/2), 'w': zone_h_inward, 'h': zone_w}\n",
        "    else: zone_props = {'xy': (BOARD_DIMS[0]-zone_h_inward, usb_cy-zone_w/2), 'w': zone_h_inward, 'h': zone_w}\n",
        "    keepout = patches.Rectangle(zone_props['xy'], zone_props['w'], zone_props['h'], fill=True, color='#e74c3c', alpha=0.15, linestyle='--', lw=2)\n",
        "    ax.add_patch(keepout)\n",
        "\n",
        "    xtal_center = _get_center(placement['CRYSTAL'])\n",
        "    ax.plot([xtal_center[0], uc_center[0]], [xtal_center[1], uc_center[1]], 'k--')\n",
        "\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    \"\"\"\n",
        "    Example usage of the utility functions.\n",
        "\n",
        "    This block demonstrates how a candidate would use this module to test their\n",
        "    own generated placements.\n",
        "    \"\"\"\n",
        "    # --- Start of Appended Time Check ---\n",
        "    start_time = time.perf_counter()\n",
        "\n",
        "    # --- Example 1: A valid placement ---\n",
        "    print(\"--- DEMO 1: TESTING A VALID PLACEMENT ---\")\n",
        "    sample_valid_placement = {\n",
        "        'USB_CONNECTOR':        {'x': 20, 'y': 45, 'w': 5, 'h': 5},\n",
        "        'MIKROBUS_CONNECTOR_1': {'x': 0, 'y': 15, 'w': 5, 'h': 15},\n",
        "        'MIKROBUS_CONNECTOR_2': {'x': 45, 'y': 15, 'w': 5, 'h': 15},\n",
        "        'MICROCONTROLLER':      {'x': 22, 'y': 22, 'w': 5, 'h': 5},\n",
        "        'CRYSTAL':              {'x': 25, 'y': 14, 'w': 5, 'h': 5},\n",
        "    }\n",
        "\n",
        "    is_valid = validate_placement(sample_valid_placement)\n",
        "    end_time = time.perf_counter()\n",
        "    elapsed_time = end_time - start_time\n",
        "\n",
        "    print(\"\\n--- Performance Report for Validation ---\")\n",
        "    print(f\"Validation function finished in: {elapsed_time:.6f} seconds\")\n",
        "    if elapsed_time <= VALIDATION_TIME_LIMIT:\n",
        "        print(f\"✅ PERFORMANCE PASSED (Validation is fast enough)\")\n",
        "    else:\n",
        "        print(f\"❌ PERFORMANCE FAILED (Validation is too slow)\")\n",
        "    print(\"---------------------------------------\")\n",
        "    if is_valid:\n",
        "        print(\"\\n✅ This placement is fully valid.\")\n",
        "        score_placement(sample_valid_placement)\n",
        "        plot_placement(sample_valid_placement)\n",
        "    else:\n",
        "        print(\"\\n❌ This placement is INVALID.\")\n",
        "        score_placement(sample_valid_placement)\n",
        "        plot_placement(sample_valid_placement)\n",
        "\n",
        "    print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c72d6ad0"
      },
      "source": [
        "## PCB Component Placement Utility Module Documentation\n",
        "\n",
        "This module provides functions to help validate, score, and visualize potential component placements on a simulated PCB board.\n",
        "\n",
        "### Functions:\n",
        "\n",
        "*   **`validate_placement(placement)`**: Checks if a given component placement adheres to all hard constraints defined in the problem. It prints a detailed report of each constraint's status and returns `True` if all constraints are met, `False` otherwise.\n",
        "    *   **Arguments:**\n",
        "        *   `placement` (dict): A dictionary where keys are component names (e.g., 'USB_CONNECTOR') and values are dictionaries with 'x', 'y', 'w', and 'h' representing the component's position and dimensions.\n",
        "*   **`score_placement(placement)`**: Calculates a score for a placement based on soft constraints, specifically compactness (bounding box area) and the centrality of the microcontroller. A lower score is better.\n",
        "    *   **Arguments:**\n",
        "        *   `placement` (dict): A valid component placement dictionary.\n",
        "    *   **Returns:**\n",
        "        *   float: The calculated total score.\n",
        "*   **`plot_placement(placement)`**: Generates a visual representation of the component placement using Matplotlib. It shows the board, components, proximity radius, and keep-out zone.\n",
        "    *   **Arguments:**\n",
        "        *   `placement` (dict): A component placement dictionary.\n",
        "\n",
        "### Usage Example:\n",
        "\n",
        "The code cell below demonstrates how to use the `validate_placement`, `score_placement`, and `plot_placement` functions with a sample valid placement."
      ]
    }
  ]
}